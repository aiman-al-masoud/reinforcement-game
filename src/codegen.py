# codegen TS modules with dictionaries of keys and base64 strings values.
import os
import io
import PIL
from PIL import Image
import base64

def to_dict(base_path: str, name: str=''):

    path = os.path.join(base_path, name)

    if os.path.isfile(path):
        extensions = ['png', 'jpeg', 'jpg', 'mp3']
        if not any([ext in path for ext in extensions]):
            return {}
        else:
            out = os.popen(f'cat {path} | base64').read()

            imgdata = base64.b64decode(out)
            im = Image.open(io.BytesIO(imgdata))
            width, height = im.size
            # print(width, height)

            image = {
                'base64': 'data:image/png;base64,'+out,
                'width': width,
                'height': height,
            }

            return {name: image}
    else:
        d = {}
        files = os.listdir(path)
        files = sorted(files)  # lexicographic order
        for f in files:
            if name not in d:
                d[name] = {}
            d[name] = {**d[name], **to_dict(path, f)}

        if not name:
            return d[name]

        return d


if __name__ == '__main__':

    import sys
    path = sys.argv[1]
    d = to_dict(path)
    print('/**\nThis is autogenerated code, do not edit by hand\n*/')
    print('export const R = ', end='')
    print(d, end='')
    print(' as const')
